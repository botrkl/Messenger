@model FlashApp.Api.Models.ChatViewModel;
@using FlashApp.BLL.Models;

@{
    Layout = "~/Views/Shared/_Layout.cshtml";
}
<link href="~/css/Chat.css" rel="stylesheet" />

<div class="chat-container">
    @if (Model != null)
    {
        <div class="messages">
            @foreach (var message in Model.chat.messages.ToList())
            {
                <div class="message @((message.User_id == Model.currentUserId.ToString()) ? "sent" : "received")">
                    <div class="message-text"> @message.Content</div>
                    @if (message.User_id == Model.currentUserId.ToString())
                    {
                        <div class="message-options">

                            <button class="delete-button">
                                <img src="~/images/bin.png" alt="delete" style="cursor: pointer;" width="15" height="15">
                            </button>

                            <button class="edit-button">
                                <img src="~/images/pencil.png" alt="edit" style="cursor: pointer;" width="15" height="15" >
                            </button>

                            <span class="message-time">@message.Creation_Time</span>
                        </div>
                    }
                    else
                    {
                        <span class="message-time">@message.Creation_Time</span>
                    }
                </div>
            }
        </div>
    }

    <div class="message-input-panel">
        <div>
            <input type="text" class="message-input-text" name="messageText" placeholder="Type your message..." />
            <button class="message-send-button">Send</button>
        </div>
    </div>
</div>

<script src="https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/6.0.1/signalr.js"></script>

<script>
    function scrollToBottomSmoothly() {
        window.scroll({
            top: document.body.scrollHeight,
            behavior: 'smooth'
        });
    }

    var connection = new signalR.HubConnectionBuilder().withUrl("/chatter").build();

    connection.start().catch(function (err) {
        return console.error(err.toString());
    });

    document.querySelector(".message-send-button").addEventListener("click", function () {
        var messageText = document.querySelector(".message-input-text").value;

        connection.invoke("Send", '@Model.chat.Id', '@Model.currentUserId', messageText).catch(function (err) {
            return console.error(err.toString());
        });

        document.querySelector(".message-input-text").value = '';
    });


    connection.on("Receive", function (message, username) {

        var messageDiv = document.createElement("div");
        messageDiv.classList.add("message", message.user_id == '@Model.currentUserId.ToString()' ? "sent" : "received");

        var contentDiv = document.createElement("div");
        contentDiv.classList.add("message-content");
        contentDiv.textContent = message.content;

        var timeDiv = document.createElement("div");
        timeDiv.classList.add("message-time");
        timeDiv.textContent = message.creation_Time;

        messageDiv.appendChild(contentDiv);

        messageDiv.appendChild(timeDiv);

        document.querySelector(".messages").appendChild(messageDiv);

        scrollToBottomSmoothly();
    });

    scrollToBottomSmoothly();
</script>

<script>
    document.querySelectorAll(".delete-button").forEach(button => {
        button.addEventListener("click", function () { console.log("1"); });
    });

    document.querySelectorAll(".edit-button").forEach(button => {
        button.addEventListener("click", function () { console.log("2"); });
    });
</script>